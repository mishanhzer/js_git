'use strict';

                // Термины
1. Аргумент - то к чему применяется оператор 5 * 2 (левый аргумент 5, правый аргумент 2)
2. Унарный оператор, оператор который применяется к одному аргументу
let x = 1;
x = -x;
console.log(x);
Унарный плюс (+). Унарный плюс преобразует строку в число, если это возможно.
console.log('string' + +' word'); // покажет stringNaN потому что 'word' не является числом
console.log(15 + +'5'); // 5 делаем из строки в обычное число с помощью унарного плюса
Унарный минус (-). Унарный минус преобразует строку в число, если это возможно и затем изменяет знак результата.
3. Бинарный оператор - оператор, который применется к двум аргументам
let x = 1,  
    y = 3;
console.log(y - x); // 2, бинарный минус вычитает значения.

                    // Математические операторы
// 1. Сложение
console.log(3 + 5); // 8
console.log('world' + 'string'); // worldstring сложение строк
console.log(3 + '5'); // 35 number + string
console.log(3 + +'5'); // 8 number + number (с помощью унарного плюса)
// 2. Вычитание
console.log(8 - 6); // 2
// 3. Умножение
console.log(5 * 2); // 10
// 4. Деление
console.log(10 / 5); // 2
// 5. Остаток от деления
console.log(5 % 2); // 1 остаток от деления 5 на 2
console.log(8 % 4); // 0 остаток от деления 8 на 4
// 6. Возведение в степень
console.log(2 ** 2); // 2 во 2 степени = 4;
// Квадратный и кубический корень
console.log(256 ** (1/2)); // корень квадратный 256 = 16
console.log(8 ** (1/3)); // корень кубический 8 = 2


                    // Инкременты и декременты (для укращение кода)
let incr = 10,
    decr = 10;

// Когда операторы ставятся после значения называется постфиксной формой записи
// если через console.log(incr++) одновременно с выводом данных вычислим инкремент, то будет старое значение 10, постфиксная форма сначала возвращает старое значение
incr++; // Инкремент ++ это увелечение на единицу
decr--; // Декремент -- это уменьшение на единицу

// Когда операторы ставим перед значением называется префиксной формой записи
//через console.log(++incr) здесь отработает как надо и будет значение 11
++incr;
--decr;

console.log(++incr); // 11
console.log(++decr); // 9


                // Знак равенства
1. = (знак присваивания);
let incr = 10; // в переменную incr присваиваем значение 10
2. == (знак для сравнения)
console.log(5 == 3 + 2); // 5 = 5 true 
console.log(5 * 2 == '10'); // true сравнение по значению
3. === (знак строгого равенства) // сравнивает и по значению и по типу данных
console.log(5 * 2 === '10'); // false сравнение строгое (в данном случае по типу данных)
4. ! (оператор отрицания) - обращает значение в обратное
const example = true;
console.log(!example); // с помощью оператор ! поменяли true  на false
5. != (не равно) !== (строгое неравенство)
console.log(2 + 2 * 2 != 8); // true потому что 6 не равно 8
console.log(2 + 2 * 2 != '6'); // false потому что 6 равно 6
console.log(2 + 2 * 2 !== '6'); // true потому что число не равно строке 
console.log(2 + 2 * 2 !== +'6'); // false 6 не равно 6
6. > (больше) < (меньше) >= (больше либо равно) <= (меньше либо равно)
console.log(3 > 5); // false 3 не больше 5
console.log (3 < 5); // true 3 меньше 5

              // && (И) || (или)
1. && (И) работает когда 2 или более аргемента true
const example = true;
const simple = true;
console.log(example && simple); // true потому что оба аргумента true, если поменяем simple на false то полное выражение нам выдаст false
2. || (Или) работает, если хотя бы один из аргументов правдивый
const example = true,
      simple = false;
console.log(example || simple); // Будет true потому что один из аргументов true



